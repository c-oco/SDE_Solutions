// Author :- Nitish ,    Github:- c-oco



//                                                   BFS (Level Order Traversal)

import java.util.* ;
import java.io.*; 

public class Solution 
{
    public static ArrayList<Integer> getLeftView(TreeNode<Integer> root) 
    {
        ArrayList<Integer> ans = new ArrayList<>();

        if(root==null) return ans;

        Queue<TreeNode<Integer>> q = new LinkedList<>();
        q.add(root);

        while(!q.isEmpty()){
            int size = q.size();
            
            ans.add(q.peek().data);              // Just get the first node of each level

            while(size-->0){
                TreeNode node =q.poll();

                if(node.left!=null)
                   q.offer(node.left);

                if(node.right!=null)
                   q.offer(node.right);
            }
        }

        return ans;
    }
}



//                                                       DFS

import java.util.* ;
import java.io.*; 

public class Solution 
{
    public static ArrayList<Integer> getLeftView(TreeNode<Integer> root) 
    {
        ArrayList<Integer> ans = new ArrayList<>();

        dfs(root, 0, ans);

        return ans;
    }

    private static void dfs(TreeNode<Integer> root, int depth, ArrayList<Integer> ans){
        if(root==null)
          return ;

        if(ans.size()==depth)                                // Set the first node of the level
           ans.add(root.data);

        dfs(root.left, depth+1, ans);                        // Traverse left first
        dfs(root.right, depth+1, ans);
    }
}
