// Author :- Nitish ,    Github:- c-oco


import java.util.* ;
import java.io.*; 
public class Solution {
    static int[] row = {-1, 0, 1, 0};
    static int[] col = {0, 1, 0, -1};
    
    public static ArrayList<ArrayList<Integer>> ratInAMaze(int[][] maze, int n) {
        ArrayList<ArrayList<Integer>> allPaths = new ArrayList<>();

        if(maze[0][0]==0 || maze[n-1][n-1]==0) return allPaths;

        ArrayList<Integer> path = new ArrayList<>();

        for(int i=0; i<n*n; i++)
           path.add(0);

        path.set(0, 1);        // set the start as 1 
        maze[0][0] = -1;        // set (0,0) as visted , -1 represent we visted that cell

        findPaths(0, 0, n, maze, path, allPaths);

        return allPaths;
    }

    private static void findPaths(int i, int j, int n, int[][] maze, ArrayList<Integer> path, ArrayList<ArrayList<Integer>> allPaths){
        if(i==n-1 && j==n-1){
            allPaths.add(new ArrayList<>(path));
            return ;
        }
        
        for(int k=0; k<4; k++){
            int r = i + row[k], c = j + col[k];
            
            // Check for boundary
            if(r>=0 && r<n && c>=0 && c<n && maze[r][c]==1){
                maze[r][c] = -1;
                path.set((n*r)+c, 1);     // Set the cell as the part of the path

                findPaths(r, c, n, maze, path, allPaths);

                maze[r][c] = 1;
                path.set((n*r)+c, 0);
            }
        }
    }
}