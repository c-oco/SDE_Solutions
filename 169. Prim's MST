// Author :- Nitish ,    Github:- c-oco



import java.util.*;
import java.io.*;

public class Solution 
{
    public static ArrayList<ArrayList<Integer>> calculatePrimsMST(int n, int m, ArrayList<ArrayList<Integer>> g)
    {
        ArrayList<ArrayList<int[]>> adj = new ArrayList<>();
        for(int i=0; i<=n; i++) adj.add(new ArrayList<>());

        for(ArrayList<Integer> edg:g){
            adj.get(edg.get(0)).add(new int[]{edg.get(1), edg.get(2)});
            adj.get(edg.get(1)).add(new int[]{edg.get(0), edg.get(2)});
        }

        boolean[] vis = new boolean[n+1];     // Visisted array

        ArrayList<ArrayList<Integer>> mst = new ArrayList<>(); 

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[2]-b[2]); // [2] holds weight
        pq.add(new int[]{-1, 1, 0});   // Add the starting node

        while(!pq.isEmpty()){
            int[] in = pq.poll();

            if(vis[in[1]]) continue;   // If visited
            
            vis[in[1]] = true;

            if(in[0]!=-1){       // If it's not the starting node
                ArrayList<Integer> edg = new ArrayList<>();
                edg.add(in[0]);
                edg.add(in[1]);
                edg.add(in[2]);

                mst.add(new ArrayList<>(edg));
            }

            for(int[] nw:adj.get(in[1])){

                if(!vis[nw[0]]){
                    pq.add(new int[]{in[1], nw[0], nw[1]});
                }
            }
        }

        return mst;
    }
}
