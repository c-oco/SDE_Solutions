// Author :- Nitish ,    Github:- c-oco



//                                                    BFS

import java.util.* ;
import java.io.*; 

class Pair{
	BinaryTreeNode node;
	int vert;

	Pair(BinaryTreeNode node, int vert){
		this.node = node;
		this.vert = vert;
	}
}

public class Solution {
    public static ArrayList<Integer> bottomView(BinaryTreeNode root) {
        ArrayList<Integer> ans = new ArrayList<>();

        if(root==null) return ans;

        TreeMap<Integer, Integer> map = new TreeMap<>();

        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(root, 0));

        while(!q.isEmpty()){
            Pair pair = q.poll();

            BinaryTreeNode node = pair.node;
            int vert = pair.vert;
            
            // Keep adding the nodes til you reach the end node for that vertical line
            map.put(vert, node.val);

            if(node.left!=null)
               q.add(new Pair(node.left, vert-1));

            if(node.right!=null)
               q.add(new Pair(node.right, vert+1));
        } 

        for(int vert:map.keySet())
           ans.add(map.get(vert));

        return ans;   
    }
}
