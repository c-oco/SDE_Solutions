// Author :- Nitish ,    Github:- c-oco



//                                                    DFS


import java.util.* ;
import java.io.*; 

public class Solution {
	public static List<Integer> zigZagTraversal(BinaryTreeNode<Integer> root) {
		List<Integer> ans = new ArrayList<>();

		if(root==null) return ans;

		TreeMap<Integer, List<Integer>> map = new TreeMap<>();
        
		dfs(root, 0, map);
        
		for(int level:map.keySet()){
			List<Integer> sub = map.get(level);
			
			for(int i=0; i<sub.size(); i++){        // Depending on level change direction of addition in the ans 
                if(level%2==0)
                   ans.add(sub.get(i));
                else
                   ans.add(sub.get(sub.size()-i-1));
            }
		}

		return ans;
	}

	private static void dfs(BinaryTreeNode<Integer> root, int level, TreeMap<Integer, List<Integer>> map){
		if(root==null) return ;

		if(!map.containsKey(level))
		   map.put(level, new ArrayList<Integer>());

		map.get(level).add(root.data);

		dfs(root.left, level+1, map);
		dfs(root.right, level+1, map);
	}
}



//                                                        BFS

import java.util.* ;
import java.io.*; 

public class Solution 
{
    public static ArrayList<Integer> zigzagTreeTraversal(TreeNode<Integer> root) 
    {
        ArrayList<Integer> ans = new ArrayList<>();

        if(root==null) return ans;

        Queue<TreeNode<Integer>> q = new LinkedList<>();
        q.add(root);

        int level=0;
        while(!q.isEmpty()){
            int size = q.size();

            ArrayList<Integer> sub = new ArrayList<>();

            while(size-->0){
                TreeNode node = q.poll();

                sub.add((int)node.data);

                if(node.left!=null)
                   q.add(node.left);

                if(node.right!=null)
                   q.add(node.right);
            }

            for(int i=0; i<sub.size(); i++){           // Depending on level change direction of addition in the ans 
                if(level%2==0)
                   ans.add(sub.get(i));
                else
                   ans.add(sub.get(sub.size()-i-1));
            }
            level++;
        }

        return ans;
    }
}
