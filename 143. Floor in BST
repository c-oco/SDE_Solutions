// Author :- Nitish ,    Github:- c-oco


//                                        DFS

import java.util.* ;
import java.io.*;

public class Solution {

    public static int floorInBST(TreeNode<Integer> root, int X) {
        int[] ans = {-1};

        search(root, X, ans);

        return ans[0];
    }

    private static void search(TreeNode<Integer> root, int key, int[] ans) {
        if(root==null) return ;

        if(root.data==key){  // For equal condition
            ans[0] = root.data;
            return ;
        }
        
        // Repeat every time we get a value less than key and greater than previous
        if(root.data>ans[0] && root.data<key)
            ans[0] = root.data;
        
        if(key<root.data)
           search(root.left, key, ans);
        else
           search(root.right, key, ans);
    } 
}



//                                    BFS

import java.util.* ;
import java.io.*; 

public class Solution {

    public static int floorInBST(TreeNode<Integer> root, int X) {
        Queue<TreeNode<Integer>> q = new LinkedList<>();

        q.offer(root);
        
        int prev = -1;
        while(!q.isEmpty()){
            TreeNode<Integer> node = q.poll();

            if(node.data==X){
                return node.data;
            }

            if(node.data>prev && node.data<X)
               prev = node.data;

            if(node.left!=null && X<node.data)
               q.offer(node.left);

            if(node.right!=null && X>node.data)
               q.offer(node.right);
        }

        return prev;
    }
}