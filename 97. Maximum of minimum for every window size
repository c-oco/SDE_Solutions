// Author :- Nitish ,    Github:- c-oco


import java.util.* ;
import java.io.*; 
public class Solution {
    public static int[] maxMinWindow(int[] a, int n) {
        Stack<Integer> st = new Stack<>();

        int[] left = new int[n+1];   // Stores previous smaller element
        int[] right = new int[n+1];  // Stores smaller element

        for(int i=0; i<n; i++){
            left[i] = -1;
            right[i] = n;
        }

        for(int i=0; i<n; i++){
            while(!st.isEmpty() && a[st.peek()]>=a[i]) st.pop();

            if(!st.isEmpty()) left[i] = st.peek();

            st.push(i);
        }

        st = new Stack<>();

        for(int i=n-1; i>=0; i--){
            while(!st.isEmpty() && a[st.peek()]>=a[i]) st.pop();

            if(!st.isEmpty()) right[i] = st.peek();

            st.push(i);
        }

        // System.out.println("l - "+Arrays.toString(left));
        // System.out.println("r - "+Arrays.toString(right));

        int[] ans = new int[n+1];
        Arrays.fill(ans, Integer.MIN_VALUE);

        for(int i=0; i<n; i++){
            int len = right[i] - left[i] - 1;

            ans[len-1] = Math.max(ans[len-1], a[i]);
        }

        // System.out.println("ans - "+Arrays.toString(ans));

        for(int i=n-1; i>=1; i--)
            ans[i] = Math.max(ans[i], ans[i+1]);
        
        // System.out.println("C - "+Arrays.toString(ans));
         
        return ans;
    }
}

