// Author :- Nitish ,    Github:- c-oco


/*                                        Meetings finishing quicly                  */


import java.util.* ;
import java.io.*; 

public class Solution {
    public static List<Integer> maximumMeetings(int[] start, int[] end) {  
        int n=end.length;

        int[][] dTime = new int[n][2];

        for(int i=0; i<n; i++){
            dTime[i][0] = i;             // stores index
            dTime[i][1] = end[i];        // stores end time 
        }

        Arrays.sort(dTime, new Comparator<int[]>() {
            @Override
            public int compare(int[] a, int[] b){ 
                return a[1] - b[1];                   // sorting according to end time
            }
        });

        List<Integer> ans = new ArrayList<>();
        
        int l=0;
        for(int i=0; i<n; i++){
            if(i==0){
                ans.add(dTime[i][0]+1);     // First meeting will always be held
                l = end[dTime[i][0]];       // Store the end time of the meeting   
                continue;
            }
            
            if(l<start[dTime[i][0]]){       // Check if start time of ith meeting is greater than end time of last done meeting
                l = end[dTime[i][0]];       // Store the end time of ith meeting
                ans.add(dTime[i][0]+1);     // Add the ith meeeting
            }
        }

        return ans;
    }
}