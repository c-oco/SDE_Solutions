// Author :- Nitish ,    Github:- c-oco



//                                       Memoization

import java.util.* ;
import java.io.*; 
public class Solution {
    public static int minSumPath(int[][] grid) {
        int n=grid.length, m=grid[0].length;

        int[][] dp = new int[n][m];

        for(int[] row:dp)
           Arrays.fill(row, -1);

    	return memo(0,0,n,m,grid,dp);
    }

    private static int memo(int i, int j, int n, int m, int[][] grid, int[][] dp){
        if(i==n-1 && j==m-1) return grid[n-1][m-1];
        if(i>=n || j>=m) return Integer.MAX_VALUE;

        if(dp[i][j]!=-1) return dp[i][j];

        int down = memo(i+1,j,n,m,grid,dp);
        int right = memo(i,j+1,n,m,grid,dp);

        return dp[i][j] = grid[i][j] + Math.min(down, right);
    }
}



//                                      Tabulation

import java.util.* ;
import java.io.*; 
public class Solution {
    public static int minSumPath(int[][] grid) {
        int n=grid.length, m=grid[0].length;

        int[][] dp = new int[n][m];
        dp[n-1][m-1] = grid[n-1][m-1];

        for(int i=n-1; i>=0; i--){
            for(int j=m-1; j>=0; j--){
                if(i==n-1 && j==m-1) continue;

                int down = Integer.MAX_VALUE;
                int right = Integer.MAX_VALUE;

                if(i<n-1) down = dp[i+1][j];
                if(j<m-1) right = dp[i][j+1];
        
                dp[i][j] = grid[i][j] + Math.min(down, right);
            }
        }

    	return dp[0][0];
    }
}



//                                   Space Optimization

import java.util.* ;
import java.io.*; 
public class Solution {
    public static int minSumPath(int[][] grid) {
        int n=grid.length, m=grid[0].length;

        int[] prev = new int[m];

        for(int i=n-1; i>=0; i--){
            int[] curr = new int[m];
            for(int j=m-1; j>=0; j--){
                if(i==n-1 && j==m-1){
                    curr[m-1] = grid[n-1][m-1];
                    continue;
                }

                int down = Integer.MAX_VALUE;
                int right = Integer.MAX_VALUE;

                if(i<n-1) down = prev[j];
                if(j<m-1) right = curr[j+1];
        
                curr[j] = grid[i][j] + Math.min(down, right);
            }
            prev = curr;
        }

    	return prev[0];
    }
}