// Author :- Nitish ,    Github:- c-oco


/*                              Using Sorting               */

import java.io.*;
import java.util.* ;

public class Solution {
    public static int lengthOfLongestConsecutiveSequence(int[] nums, int N) {
        if(nums.length<=1) return nums.length;

        Arrays.sort(nums);                    // Sort the array
            
        int len = 1;                          // Minimum length will be 1
        int cnt=1, prev=nums[0], i=1;         // prev stores last consecutive element

        while(i<nums.length){
            if(prev==nums[i]-1){              // If nums[i] is consecutive element 
                cnt++;                        // Increase count
                len = Math.max(len, cnt);     // See max length
            }else if(prev!=nums[i]){          
                cnt = 1;                     // Initialize cnt=1
            }
            
             prev = nums[i];          // Stores previous consecutive element even there are multiple same prev
            i++;
        }

        return len;
    }
}




/*                                        Using HashSet               */

import java.io.*;
import java.util.* ;

public class Solution {
    public static int lengthOfLongestConsecutiveSequence(int[] arr, int N) {
        if(N==1) return 1;

        HashSet<Integer> set = new HashSet<>();   // Storing distinct elements

        for(int a:arr)
           set.add(a);

        Iterator it = set.iterator();         // To iterate through hashset

        int len = 1;             // Min sequence will be 1 always
        while(it.hasNext()){
            int val = (int)it.next();
            
            // If set contains previous consecutive  (val-1) of val then we won't consider it, as it is not the starting of the sequence 
            if(!set.contains(val-1)){
                int cnt=1;                     // There will always be 1 consecuitve

                while(set.contains(++val)) cnt++;    // Till there are consecutive

                len = Math.max(len, cnt);           // Store maximum 
            } 
        }

        return len;
    }
}