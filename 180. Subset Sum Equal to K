// Author :- Nitish ,    Github:- c-oco



//                                  Memoization

import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        int[][] dp = new int[n][k+1];

        for(int[] row:dp)
           Arrays.fill(row, -1);

        return memo(n-1,k,arr,dp)==1;
    }

    private static int memo(int i, int k, int[] arr, int[][] dp){
        if(k==0) return 1;
        if(i==0) return k==arr[0]?1:0;

        if(dp[i][k]!=-1) return dp[i][k];

        int ntake = memo(i-1,k,arr,dp);

        int take = 0;
        if(arr[i]<=k)
           take = memo(i-1,k-arr[i],arr,dp);

        return take | ntake;
    }
}



//                                          Tabulation

import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        int[][] dp = new int[n][k+1];

        for(int i=0; i<n; i++) dp[i][0] = 1;

        if(arr[0]<=k)
           dp[0][arr[0]] = 1;

        for(int i=1; i<n; i++){
            for(int j=1; j<=k; j++){

                int ntake = dp[i-1][j];

                int take = 0;
                if(arr[i]<=j)
                   take = dp[i-1][j-arr[i]];
        
                dp[i][j] =  take | ntake;
            }
        }

        return dp[n-1][k]==1;
    }
}



//                                        Space Optimization

import java.util.* ;
import java.io.*; 
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        int[] prev = new int[k+1];

        if(arr[0]<=k)
           prev[arr[0]] = 1;

        prev[0] = 1;
        for(int i=1; i<n; i++){
            int[] curr = new int[k+1];
            curr[0] = 1;
            for(int j=1; j<=k; j++){

                int ntake = prev[j];

                int take = 0;
                if(arr[i]<=j)
                   take = prev[j-arr[i]];
        
                curr[j] =  take | ntake;
            }
            prev = curr;
        }

        return prev[k]==1;
    }
}
