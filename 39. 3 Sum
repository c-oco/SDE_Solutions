// Author :- Nitish ,    Github:- c-oco


import java.util.* ;
import java.io.*; 
public class Solution {

	public static ArrayList<ArrayList<Integer>> findTriplets(int[] arr, int n, int K)  {
        ArrayList<ArrayList<Integer>> triples = new ArrayList<>();

		Arrays.sort(arr);                       // Sort the array

		for(int i=0; i<n; i++){

			if(i==0 || (i>0 && arr[i-1]!=arr[i])){
				int lb = i+1, ub=n-1;
				int remSum = K-arr[i];                 // Remove the arr[i] from sum

				while(lb<ub){
					if(arr[lb]+arr[ub]==remSum){                     // If remSum is equal to these 2 elements
                        ArrayList<Integer> sub = new ArrayList<>();
                        sub.add(arr[i]);
						sub.add(arr[lb]);
						sub.add(arr[ub]);

						triples.add(new ArrayList<>(sub));

						while(lb<ub && arr[lb]==arr[lb+1]) lb++;    // Traverse all equal values
						while(lb<ub && arr[ub-1]==arr[ub]) ub--;

						lb++;          // Since now lb will point to ub, and ub will point to lb
						ub--;
					}
					else if(arr[lb]+arr[ub]>remSum) ub--;
					else lb++;
				}
			}
		}

		return triples;
	}
}
