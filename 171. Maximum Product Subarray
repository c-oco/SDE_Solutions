// Author :- Nitish ,    Github:- c-oco



//                                     Two Traversal

import java.util.*;
import java.io.*;

public class Solution {
	public static int maximumProduct(ArrayList<Integer> arr, int n) {
		int mL=arr.get(0), mR=arr.get(0);
		
		int p=1;
		boolean zero = false;

		for(int num:arr){
			p *= num;

			if(num==0){
				zero = true;     // In case all are -ve then max will be -ve, but if z is present then max will be 0 
				p=1;
				continue;
			}

			mL = Math.max(mL, p);
		}

		p=1;

		for(int i=n-1; i>=0; i--){
			p *= arr.get(i);

			if(arr.get(i)==0){
				zero = true;
				p=1;
				continue;
			}

			mR = Math.max(mR, p);
		}

		if(zero) return Math.max(mL, Math.max(mR, 0));

		return Math.max(mL, mR);
	}
}



//                                     Single Traversal

import java.util.* ;
import java.io.*; 

public class Solution {
	public static int maximumProduct(ArrayList<Integer> arr, int n) {
		int l=1, r=1, max = arr.get(0);
        
		for(int i=0; i<n; i++){

			l = l==0?1:l;
			r = r==0?1:r;

			l *= arr.get(i);
			r *= arr.get(n-i-1);

			max = Math.max(max, Math.max(l, r));
		}

		return max;
	}
}

