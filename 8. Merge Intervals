// Author :- Nitish ,    Github:- c-oco

/*                                Sorting and check the given consition      */

import java.util.*;
import java.io.*;
/*******************************************************

    Following is the Interval class structure

    class Interval {
        int start, int finish;

        Interval(int start, int finish) {
            this.start = start;
            this.finish = finish;
        }
    }
    
*******************************************************/

import java.util.List;
import java.util.ArrayList;

public class Solution {
    public static List<Interval> mergeIntervals(Interval[] intervals) {
        List<Interval> ans = new ArrayList<>();

        Arrays.sort(intervals, new Comparator<Interval>(){                  // Sort the array based on start value
            @Override
            public int compare(Interval a, Interval b){
                return a.start - b.start;
            }
        });

        for(Interval in:intervals){
            if(ans.isEmpty() || ans.get(ans.size()-1).finish<in.start)             // If ans list is Empty || the new interval's start value is greater than previous interval's finish value then push the interval 
                ans.add(in);
            else{                                                                  // Merging
                Interval last = ans.get(ans.size()-1);
                last.finish = Math.max(ans.get(ans.size()-1).finish, in.finish);     // Just substitute the finish value of last interval with maximum one
                ans.set(ans.size()-1, last);
            }
        }
        
        return ans;
    }
}
