// Author :- Nitish ,    Github:- c-oco



//                                    Memoization

import java.util.* ;
import java.io.*; 

public class Solution {
	public static int matrixMultiplication(int[] arr , int N) {
		int[][] dp = new int[N][N];

		for(int[] row:dp)
		  Arrays.fill(row, -1);

		return memo(1, N-1, arr, dp);
	}

	private static int memo(int i, int j, int[] arr, int[][] dp){
		if(i==j) return 0;

		if(dp[i][j]!=-1) return dp[i][j];

		int minO=Integer.MAX_VALUE;
		for(int k=i; k<=j-1; k++){
			int steps = arr[i-1] * arr[k] * arr[j] + memo(i,k,arr,dp) + memo(k+1,j,arr,dp);
			minO = Math.min(minO,steps);
		}

		return dp[i][j] = minO;
	}
}



//                                  Tabulation

import java.util.* ;
import java.io.*; 

public class Solution {
	public static int matrixMultiplication(int[] arr , int N) {
		int[][] dp = new int[N][N];

		for(int i=N-1; i>=1; i--){
			for(int j=i+1; j<N; j++){
				int minO=Integer.MAX_VALUE;
		        for(int k=i; k<=j-1; k++){
		        	int steps = arr[i-1] * arr[k] * arr[j] + dp[i][k] + dp[k+1][j];
		        	minO = Math.min(minO,steps);
		        }
        
		        dp[i][j] = minO;
			}
		}

		return dp[1][N-1];
	}
}

