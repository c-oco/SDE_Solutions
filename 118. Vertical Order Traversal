// Author :- Nitish ,    Github:- c-oco



//                                                     DFS 

import java.util.* ;
import java.io.*; 


public class Solution 
{
    public static ArrayList<Integer> verticalOrderTraversal(TreeNode<Integer> root) 
    {
        ArrayList<Integer> ans = new ArrayList<>();

        TreeMap<Integer, TreeMap<Integer, ArrayList<Integer>>> map = new TreeMap<>();

        dfs(root, 0, 0, map);            // DFS Technique
        
        for(TreeMap<Integer, ArrayList<Integer>> levels:map.values()){
            for(ArrayList<Integer> list:levels.values()){
                ans.addAll(list);
            }
        }

        return ans;
    }

    private static void dfs(TreeNode<Integer> root, int vert, int level, TreeMap<Integer, TreeMap<Integer, ArrayList<Integer>>> map){
        if(root==null)
           return ;

        if(!map.containsKey(vert)){
            map.put(vert, new TreeMap<>());
        }
        
        if(!map.get(vert).containsKey(level)){
            map.get(vert).put(level, new ArrayList<>());
        }

        map.get(vert).get(level).add(root.data);

        dfs(root.left, vert-1, level+1, map);
        dfs(root.right, vert+1, level+1, map);
    }
}




//                                                              BFS

import java.util.* ;
import java.io.*; 

class Node{
    TreeNode<Integer> node;
    int vert;
    int level;

    Node(TreeNode<Integer> node, int vert, int level){
        this.node = node;
        this.vert = vert;
        this.level = level;
    }
}

public class Solution 
{
    public static ArrayList<Integer> verticalOrderTraversal(TreeNode<Integer> root) 
    {
        ArrayList<Integer> ans = new ArrayList<>();

        if(root==null) return ans;

        TreeMap<Integer, TreeMap<Integer, ArrayList<Integer>>> map = new TreeMap<>();

        Queue<Node> q = new LinkedList<>();
        q.add(new Node(root, 0, 0));                            // Push root node

        while(!q.isEmpty()){
            Node n = q.poll();

            if(!map.containsKey(n.vert)){
                map.put(n.vert, new TreeMap<>());
            }
            if(!map.get(n.vert).containsKey(n.level)){
                map.get(n.vert).put(n.level, new ArrayList<>());
            }

            map.get(n.vert).get(n.level).add(n.node.data);               // Push data

            if(n.node.left!=null)
               q.add(new Node(n.node.left, n.vert-1, n.level+1));

            if(n.node.right!=null)
               q.add(new Node(n.node.right, n.vert+1, n.level+1));
        }
        
        for(TreeMap<Integer, ArrayList<Integer>> levels:map.values()){
            for(ArrayList<Integer> list:levels.values()){
                ans.addAll(list);
            }
        }

        return ans;
    }
}

