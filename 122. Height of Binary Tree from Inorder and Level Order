// Author :- Nitish ,    Github:- c-oco



//                          On Coding Ninjas this approach is only working below i used array to store instead of class, that gives TLE

import java.util.* ;
import java.io.*; 

class Node {
    int h;
    int l;
    int r;

	Node(int h, int l, int r){
		this.h = h;
		this.l = l;
		this.r = r;
	}
}

public class Solution {
	public static int heightOfTheTree(int[] inorder, int[] levelOrder, int N){
		if(inorder.length==1) return 0;

		Queue<Node> q = new LinkedList<>();
		q.add(new Node(0, 0, N-1));          // height, lower bound, upper bound

		int [] pos= new int[N+1];

        for(int i=0;i<N;i++)
            pos[inorder[i]] = i;
        
		int maxHeight = 0;
		for(int i=0; i<N; i++){
			Node tri = q.poll();

			maxHeight = Math.max(maxHeight, tri.h);

			int root = pos[levelOrder[i]];

			if(root-1>=tri.l){              // lower bound
				q.add(new Node(tri.h+1, tri.l, root-1));
			}

			if(root+1<=tri.r){              // upper bound
				q.add(new Node(tri.h+1, root+1, tri.r));
			}
		}

		return maxHeight;
	}
}




//                                                   BFS (Used array for storing)

import java.util.* ;
import java.io.*; 

public class Solution {
	public static int heightOfTheTree(int[] inorder, int[] levelOrder, int N){
		if(inorder.length==1) return 0;

		Queue<int[]> q = new LinkedList<>();
		q.add(new int[]{0, 0, N-1});          // height, lower bound, upper bound

		Map<Integer, Integer> map = new HashMap<>();

		for(int i=0; i<N; i++)
		   map.put(inorder[i], i);
        
		int maxHeight = 0;
		for(int i=0; i<N; i++){
			int[] tri = q.poll();

			maxHeight = Math.max(maxHeight, tri[0]);

			int root = map.get(levelOrder[i]);

			if(root-1>=tri[1]){              // lower bound
				q.add(new int[]{tri[0]+1, tri[1], root-1});
			}

			if(root+1<=tri[2]){              // upper bound
				q.add(new int[]{tri[0]+1, root+1, tri[2]});
			}
		}

		return maxHeight;
	}
}