// Author :- Nitish ,    Github:- c-oco



import java.util.*;

class Node {
    Node links[] = new Node[2]; 
    
    public Node() {
    }
    boolean containsKey(int ind) {
        return (links[ind] != null); 
    }
    Node get(int ind) {
        return links[ind]; 
    }
    void put(int ind, Node node) {
        links[ind] = node; 
    }
};
class Trie {
    private static Node root; 
 
    //Initialize your data structure here
    Trie() {
        root = new Node(); 
    }
    //Inserts a word into the trie
    public static void insert(int num) {
        Node node = root;
        for(int i = 31;i>=0;i--) {
            int bit = (num >> i) & 1; 
            if(!node.containsKey(bit)) {
                node.put(bit, new Node()); 
            }
            node = node.get(bit); 
        }
    }
    
    public int getMax(int num) {
        Node node = root; 
        int maxNum = 0; 
        for(int i = 31;i>=0;i--) {
            int bit = (num >> i) & 1; 
            if(node.containsKey(1 - bit)) {
                maxNum = maxNum | (1<<i);
                node = node.get( 1 - bit); 
            }
            else {
                node = node.get(bit); 
            }
        }
        return maxNum; 
    }
};

public class Solution {
    public static ArrayList<Integer> maxXorQueries(ArrayList<Integer> arr, ArrayList<ArrayList<Integer>> queries) {
        ArrayList<Integer> ans = new ArrayList<>();
        for(int i=0; i<queries.size(); i++) ans.add(-1);

        Collections.sort(arr);

        ArrayList<int[]> offQ = new ArrayList<>();
        
        for(int i=0; i<queries.size(); i++){
            offQ.add(new int[]{i, queries.get(i).get(0), queries.get(i).get(1)});
        }

        Collections.sort(offQ, (a,b)->a[2]-b[2]);
        
        Trie trie = new Trie();
        
        int ind=0;
        for(int i=0; i<offQ.size(); i++){
            int[] q = offQ.get(i);

            while(ind<arr.size() && arr.get(ind)<=q[2]){
                trie.insert(arr.get(ind));
                ind++;
            }
            if(ind==0) ans.set(q[0],-1);
            else ans.set(q[0], trie.getMax(q[1]));
        }

        return ans;
    }
}