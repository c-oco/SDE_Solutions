// Author :- Nitish ,    Github:- c-oco



//                                           Using 2 stacks   

import java.util.*;

public class Solution {
  public static int largestRectangle(ArrayList<Integer> h) {
    Stack<Integer> st = new Stack<>();
    
    int n=h.size();
    int[] l = new int[n];
    int[] r = new int[n];

    for(int i=0; i<n; i++){
      // Remove till you find the last height less than current
      while(!st.isEmpty() && h.get(st.peek())>h.get(i)) st.pop();
  
      if(st.isEmpty()) l[i] = 0;
      else l[i] = st.peek()+1;

      st.push(i);
    }

    st = new Stack<>();

    for(int i=n-1; i>=0; i--){
      // Remove till you find the last height less than current
      while(!st.isEmpty() && h.get(st.peek())>=h.get(i)) st.pop();

      if(st.isEmpty()) r[i] = n-1;
      else r[i] = st.peek()-1;

      st.push(i);
    }
    
    int max = 0;
    for(int i=0; i<n; i++){
      max = Math.max(max, (r[i]-l[i]+1) * h.get(i));
    }

    return max;
  }
}



//                                           Using 1 stack

import java.util.*;

public class Solution {
  public static int largestRectangle(ArrayList < Integer > h) {
    Stack<Integer> st = new Stack<>();
        
    int max = 0;
    int n = h.size();
    for(int i=0; i<=n; i++){
        while(!st.isEmpty() && (i==n || h.get(st.peek())>=h.get(i))){
            int height = h.get(st.pop());
            
            int width = i;
            
            if(!st.isEmpty()){
                width = i-st.peek()-1;
            }
            
            max = Math.max(max, height*width);
        }
        st.push(i);
    }
    
    return max;
  }
}