// Author :- Nitish ,    Github:- c-oco


//                                        DFS

import java.util.* ;
import java.io.*;

public class Solution {

    public  static int findCeil(TreeNode<Integer> node, int x) {
        int[] ans = {(int)1e9};

        search(node, x, ans);

        return ans[0]==(int)1e9?-1:ans[0];
    }

    private static void search(TreeNode<Integer> root, int key, int[] ans) {
        if(root==null) return ;

        if(root.data==key){  // For equal condition
            ans[0] = root.data;
            return ;
        }
        
        // Repeat every time we get a value
        if(root.data<ans[0] && root.data>key)
            ans[0] = root.data;
        
        if(key<root.data)
           search(root.left, key, ans);
        else
           search(root.right, key, ans);
    } 
}



//                                   BFS 

import java.util.* ;
import java.io.*; 

public class Solution {

    public  static int findCeil(TreeNode<Integer> root, int x) {
        Queue<TreeNode<Integer>> q = new LinkedList<>();

        q.offer(root);
        
        int prev = (int)1e9;
        while(!q.isEmpty()){
            TreeNode<Integer> node = q.poll();

            if(node.data==x){
                return node.data;
            }

            if(node.data<prev && node.data>x)
               prev = node.data;

            if(node.left!=null && x<node.data)
               q.offer(node.left);

            if(node.right!=null && x>node.data)
               q.offer(node.right);
        }

        return prev==(int)1e9?-1:prev;
    }
}
