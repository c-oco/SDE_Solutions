// Author :- Nitish ,    Github:- c-oco

import java.util.* ;
import java.io.*; 
import java.util.ArrayList;
import java.util.Collections;

public class Solution 
{
	public static ArrayList<Integer> nextPermutation(ArrayList<Integer> permutation) 
	{
		if(permutation.size()==1)     // For length 1 no need to find
		  return permutation;
		else{
			int n=permutation.size();
			int i=n-2;
            
			// Till we do not find situation where i<i+1
			while(i>=0 && permutation.get(i)>permutation.get(i+1)) i--;
            
			//System.out.println("i -- "+i);
            
			// If we find above situation then we swap
			if(i>=0){
				int j=n-1;
			    while(i<j && permutation.get(i)>permutation.get(j)) j--;

			    int temp=permutation.get(i);
			    permutation.set(i, permutation.get(j));
			    permutation.set(j, temp);
			}
            
			// reverse the rest of the right side array
			reverse(permutation, i+1, n-1);

			return permutation;
		}
	}

	private static void reverse(ArrayList<Integer> permutation, int i, int j){
		while(i<j){
			int temp=permutation.get(i);
			permutation.set(i, permutation.get(j));
			permutation.set(j, temp);
			
			i++; --j;
		}
	}
}
