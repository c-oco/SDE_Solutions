// Author :- Nitish ,    Github:- c-oco


/****************************************************************

 Following is the class structure of the Node class:

 class Node {
     public int data;
     public Node next;
     public Node child;

     Node()
     {
         this.data = 0;
         this.next = null;
         this.child = null;
     }
     Node(int data)
     {
         this.data = data;
         this.next = null;
         this.child = null;
     }
     Node(int data, Node next, Node child)
     {
         this.data = data;
         this.next = next;
         this.child = child;
     }
 }

 *****************************************************************/

public class Solution {
    public static Node flattenLinkedList(Node head) {
        if(head.next==null) return head;       // If no next node no change

        Node child = head;                 // child
        Node right = head.next;            // next Head

        right = flattenLinkedList(right);   // go to last head
        child.next = null;                  // remove next pointer

        return merge(child, right);         // merge them 
    }

    public static Node merge(Node l1, Node l2){           // Merge function 
        Node temp = new Node(-1), h = temp;             

        while(l1!=null && l2!=null){
            if(l1.data<=l2.data){
                temp.child = l1;
                temp = l1;

                l1 = l1.child;
            }else{
                temp.child = l2;
                temp = l2;

                l2 = l2.child;
            }
        }

        if(l1!=null) temp.child = l1;
        if(l2!=null) temp.child = l2;

        return h.child;
    }
}