// Author :- Nitish ,    Github:- c-oco



//                                 Memoization

import java.util.* ;
import java.io.*; 
public class Solution {

	public static int palindromePartitioning(String str) {
		int n=str.length();
        
		int[] dp = new int[n];
		Arrays.fill(dp, -1);

		return memo(0,n,str,dp)-1;
	}

	private static int memo(int i, int n, String str, int[] dp){
		if(i==n) return 0;

		if(dp[i]!=-1) return dp[i];

		int minCost = Integer.MAX_VALUE;
		for(int j=i; j<n; j++){
			if(isPalindrome(i,j,str)){
				int cost = 1 + memo(j+1,n,str,dp);
			    minCost = Math.min(minCost, cost);
			}
		}

		return dp[i] = minCost;
	}

	private static boolean isPalindrome(int i, int j, String s){
		while(i<j){
			if(s.charAt(i)!=s.charAt(j)) return false;
			i++;
			j--;
		}

		return true;
	}
}




//                                      Tabulation

import java.util.* ;
import java.io.*; 
public class Solution {

	public static int palindromePartitioning(String str) {
		int n=str.length();
        
		int[] dp = new int[n+1];
		dp[n] = 0;

		for(int i=n-1; i>=0; i--){
			int minCost = Integer.MAX_VALUE;
		    for(int j=i; j<n; j++){
		    	if(isPalindrome(i,j,str)){
		    		int cost = 1 + dp[j+1];
		    	    minCost = Math.min(minCost, cost);
		    	}
		    }
			dp[i] = minCost;
		}

		return dp[0]-1;
	}

	private static boolean isPalindrome(int i, int j, String s){
		while(i<j){
			if(s.charAt(i)!=s.charAt(j)) return false;
			i++;
			j--;
		}

		return true;
	}
}
