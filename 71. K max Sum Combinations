// Author :- Nitish ,    Github:- c-oco


/*                                    By making all possible sums                */

import java.util.* ;
import java.io.*; 
public class Solution{
	public static ArrayList<Integer> kMaxSumCombination(ArrayList<Integer> a, ArrayList<Integer> b, int n, int k){
		ArrayList<Integer> ans = new ArrayList<>();
		
		// Sorts in decreasing order
		PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());

		for(int a1:a){
			for(int b1:b){
				pq.add(a1+b1);         // All possible sum
			}
		}
        
		while(k-->0){
			ans.add(pq.poll());        // Add max k sums
		}
		
		return ans;
	}
}



/*                                      By using Diagonal Pairs and                */

import java.util.*;
import java.io.*; 

import java.util.Objects;

class Pair{
	private int first;
    private int second;
    public Pair(int first, int second){
        this.first = first;
        this.second = second;
    }
    
    public int getFirst(){
    	return first;
    }

    public int getSecond(){
    	return second;
    }
    @Override public boolean equals(Object o){
        if (o==null || !(o instanceof Pair)) {
            return false;
        }
        Pair obj = (Pair)o;
        return (first == obj.first && second == obj.second);
    }

    @Override public int hashCode(){
        return Objects.hash(first, second);
    }
}

class PairSum implements Comparable<PairSum>{
	private int sum;
    private int first;
    private int second;
    public PairSum(int sum, int first, int second){
        this.sum = sum;
        this.first = first;
        this.second = second;
    }

    public int getSum(){
    	return sum;	
    }
    
    public int getFirst(){
    	return first;	
    }
    
    public int getSecond(){
    	return second;	
    }

    @Override public int compareTo(PairSum o){
        return Integer.compare(o.sum, sum);
    }
}
public class Solution{
	public static ArrayList<Integer> kMaxSumCombination(ArrayList<Integer> a, ArrayList<Integer> b, int n, int k){
		ArrayList<Integer> ans = new ArrayList<>();

		PriorityQueue<PairSum> pq = new PriorityQueue<>();
		HashSet<Pair> set = new HashSet<>();
        
        Collections.sort(a);   // Sort both the arrays
		Collections.sort(b);

		int i=a.size()-1, j=b.size()-1;

		pq.add(new PairSum(a.get(i)+b.get(j), i, j));  // Add the sum and index of both the elements
		set.add(new Pair(i, j));    // Add only index

		while(k>0){
			PairSum ps = pq.poll();     

			i = ps.getFirst();
			j = ps.getSecond();

			ans.add(ps.getSum());       // Add sum to answer
            
			// Check for duplicate Pairs, find the diagonal pairs
			if(i>0 && !set.contains(new Pair(i-1, j))){   
				pq.add(new PairSum(a.get(i-1)+b.get(j), i-1, j));
				set.add(new Pair(i-1, j));
			}

			if(j>0 && !set.contains(new Pair(i, j-1))){
				pq.add(new PairSum(a.get(i)+b.get(j-1), i, j-1));
				set.add(new Pair(i, j-1));
			}

			k--;
		}

		return ans;
	}
}