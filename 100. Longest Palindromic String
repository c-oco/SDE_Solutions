// Author :- Nitish ,    Github:- c-oco


//                                       Dp

class Solution {
    public String longestPalindrome(String s) {
        int n=s.length();
        int[] ans = {0, 0};
        
        boolean[][] dp = new boolean[n][n];
        
        for(int i=0; i<n; i++)
            dp[i][i] = true;
        
        for(int i=0; i<n-1; i++)
            if(s.charAt(i)==s.charAt(i+1)){
                dp[i][i+1] = true;
                ans[0] = i;
                ans[1] = i+1;
            }
        
        for(int dif=2; dif<n; dif++){
            for(int i=0; i<n-dif; i++){
                int j = i+dif;
                
                if(s.charAt(i)==s.charAt(j) && dp[i+1][j-1]){
                    dp[i][j] = true;
                    ans[0] = i;
                    ans[1] = j;
                }
            }
        }
        
        return s.substring(ans[0], ans[1]+1);
    }
}



//                                      Expanding

class Solution {
    public String longestPalindrome(String str) {
        int n=str.length();
        if(n<2) return str;
        
        int[] ans = {0, 0};
        
        for(int i=0; i<n-1; i++){
            expand(str, i, i, ans);
            expand(str, i, i+1, ans);
        }

        return str.substring(ans[0], ans[0]+ans[1]);
    }
    
    private static void expand(String s, int i, int j, int[] ans){
        while(i>=0 && j<s.length() && s.charAt(i)==s.charAt(j)){
            i--;
            j++;
        }

        if(ans[1]<j-i-1){
            ans[0] = i+1;
            ans[1] = j-i-1;
        }
    }
}


