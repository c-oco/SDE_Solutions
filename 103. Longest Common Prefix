// Author :- Nitish ,    Github:- c-oco



//                                            Find smallest length string

public class Solution {
    public static String commonPrefix(String []arr,int n){
        int min = 1000;
        int ind = -1;

        for(int i=0; i<n; i++){
            if(arr[i].length()<min){
                min = arr[i].length();     // Find the string of minimum length
                ind = i;
            }
        }

        int i=0;
        while(i<arr[ind].length()){
            for(int j=0; j<n; j++){
                if(arr[j].charAt(i)!=arr[ind].charAt(i)){     // The character which does not equals to others
                    String sub = arr[ind].substring(0, i);

                    return sub;
                }
            }

            i++;
        }

        return arr[ind];     // All strings contain this smallest string
    }
}



//                                             Using Trie (TLE on coding ninjas)

class TrieNode{
    private TrieNode childs[];
    private boolean end;
    private int prefix;

    TrieNode(){
        childs = new TrieNode[26];
        end = false;
        prefix = 0;
    }

    public boolean contains(char ch){
        return childs[ch-'a'] != null;
    }

    public TrieNode get(char ch){
        return childs[ch-'a'];
    }

    public void put(char ch, TrieNode node){
        childs[ch-'a'] = node;
    }

    public boolean isEnd(){     // Used for end
        return end;
    }

    public void setEnd(){
        end = true;
    }

    public void inPrefix(){      // Use for prefix
        prefix++;
    }

    public int getPrefix(){
        return prefix;
    }
}

class Trie {
    TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

    public void insert(String word) {
        TrieNode node = root;

        for(char ch:word.toCharArray()){
            if(!node.contains(ch)){
                node.put(ch, new TrieNode());
            }
            
            node = node.get(ch);
            node.inPrefix();
        }
        node.setEnd();
    }

	public String prefix(TrieNode node, int n){

		char ch='a';
		while(ch<='z'){
			if(node.contains(ch)){
				TrieNode temp = node.get(ch);        // Get the character node 

				if(temp.getPrefix()==n){            // Check if all strings have this character
					return ch + prefix(temp, n);    // Further call the function
				}

				break;
			}

			ch++;
		}

		return "";  // Return empty string if all strings do not contain this character or you come to an end  
	}
}

public class Solution {

	public static String longestCommonPrefix(String[] arr, int n) {
		Trie trie = new Trie();

		for(String s:arr)
		  trie.insert(s);

		return trie.prefix(trie.root, n);
	}
}
